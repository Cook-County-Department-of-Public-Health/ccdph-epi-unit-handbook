# CCDPH SQL Server {.unnumbered}

The CCDPH SQL Server refers to a full-featured public health database management system built on Microsoft SQL Server. The server is installed and managed internally on CCDPH network servers (i.e., It is not a cloud service).

The Health Information Services (HIS) Department established the [HIPAA-compliant](https://www.hhs.gov/hipaa/index.html) server in summer 2022 at the request of the CD and Epi units as part of an effort to centralize and coordinate efficient and secure data storage and sharing within and between the units. Server data are backed up nightly by HIS staff.

## CCDPH SQL Server contents

The CCDPH SQL Server includes patient-level vital statistics, hospital discharge, communicable disease cases and other data used by CCDPH epidemiologists in their surveillance activities. Information stored on the server change regularly as databases and tables are created and modified.

### Databases and tables

\[add information about database, table names including descriptions, columns and content.\]

## How to access

Only select CD and Epi unit employees and interns have access to information stored on the CCDPH SQL Server (Server). Permissions to read and/or edit data objects on the server are set by data owners and are limited to staff who have Windows authenticated access to the Cook County Health and Hospital System (CCHHS) network domain (i.e., staff who have a CCHHS user name and password).

The first step to gaining access to the server is to *send an email request to a data owner.* CD staff should request access from [Kelley Bemis](mailto:kbemis@cookcountyhealth.org) (Program Manager) and Epi staff should request access from [Scott Smith](mailto:christopher.smith@cookcountyhealth.org) (Project Coordinator). The email should specify the particular datasets needed (e.g., death certificate records). The data owner will respond with the server name and names of databases, tables, and/or columns to which the requester has been granted access.

Users may access server data via different platforms. Instructions for access via select protocols are provided below.

### R via DBI package

To protect server security, it is advised that R users encrypt the server name using the [keyring](https://cran.r-project.org/web/packages/keyring/index.html) package. For example, the below code *key_set("ccdph_sql_server")* will prompt the user to type in and "set" the server name in keyring. Once set, the user may access the encrypted key using the command, *key_get("ccdph_sql_server")*.

```{r}
#| label: encrypt server name using keyring
#| eval: false
#| code-fold: false

# activate packages
library(DBI)
library(odbc)
library(keyring)

# set server name "password" as "ccdph_sql_server"
# when prompted type in/copy protected server name "password" into dialog box 
key_set("ccdph_sql_server")

# retrieve/get server name in code
key_get("ccdph_sql_server")

```

Use the following code to connect to the server using stored keyring password/secret. Databases and tables to which you have been granted access will appear in the RStudio Connections tab. Refer to instructions in subsequent sections in this document to go about importing, exporting, and editing objects on the server.

```{r}
#| label: access database content
#| eval: false
#| code-fold: false

# activate packages
library(DBI)
library(odbc)
library(keyring)

con_ccdph_sql_server <- dbConnect(odbc::odbc(),
                        Driver   = "SQL Server",
                        Server   = key_get("ccdph_sql_server"))
```

### Microsoft applications via ODBC

To access server data using Microsoft applications, it is necessary to first install the SQL Server ODBC driver. Follow the steps below.

-   Type "ODBC Data Sources" into the Windows search prompt to open the ODBC Data Source Administrator dialog.
-   Click "New" in the dialog and select "SQL Server" as the driver type.

::: {#fig-odbc layout-ncol="2"}
![Add SQL Server ODBC connection](/images/sqlserver_add_odbc_connection.png){#fig-odbc01}

![Set SQL Server ODBC data source](/images/sqlserver_set_odbc_data_source.png){#fig-odbc02}
:::

## Setting permissions

Third parties outside of the Cook County Health & Hospitals System (CCHHS) do not have access to the service. Access to the service, databases, tables and particular table columns are granted to employees on a must-need basis. The server name and IP address are shared with staff upon access approval. Data are managed by designated data owners and editors.


::: {.callout-note collapse="false"}
## Code for reading and writing geographic layers from/to CCDPH SQL Server via R

To import the read and write spatial layer to database functions into your R script, copy, paste, then run the following code in R. 

```{verbatim}
source("https://raw.githubusercontent.com/Cook-County-Department-of-Public-Health/ccdph-functions/master/spatial-database-functions.R")
```

To read spatial data into R use the *fx_read_spatial_layer_fr_database* function. Parameters for this function include: *schema_name* or name of the schema that the spatial database table is assigned to (defaults to "ref"); *db_table_name* or name of spatial table in inter-spatial database (refer to @fig-spatialtables above); and *crs_id* or the desired coordinate reference system  (defaults to 3435 but set to 4326 when mapping in leaflet). The example code below imports the clipped municipalities in Cook County data layer into R as a *munis_cook_county_clipped* simple feature dataframe, reprojected into geographic coordinate system 4326.

```{verbatim}

munis_cook_county_clipped <- fx_read_spatial_layer_fr_database(
  db_table_name = "munis_cook_county_clipped", 
  crs_id = 4326
  )

```

To write spatial data into R use the *fx_read_spatial_layer_to_database* function, which has the following parameters: *sf_layer_df* or the simple feature data frame you wish to write to the database; *schema_name* or name of the schema that the spatial database table will be assigned to (defaults to "ref"); *db_table_name* or name of spatial table that will be written to the database (WARNING: this will overwrite any existing table with the same name); and *crs_id* or the desired coordinate reference system for the spatial table to be written to the database (defaults to 3435). The example code below writes the counties in Illinois simple feature dataframe in R to a spatial table in the spatial database with name *counties_illinois* assigned to schema, *ref*.

```{verbatim}

fx_write_spatial_layer_to_database(
  sf_layer_name = counties_il_sf,
  schema_name = "ref",
  db_table_name = "counties_illinois",
  crs_id = 3435
)

```

Be sure to update the *00_table_dictionary* reference table in R when writing new spatial layers to the database.

:::

::: {.callout-note collapse="false"}
## Other geography-related resources

### Code for managing geographic layers
The Epidemiology and Communicable Disease units develop and share code used to develop and manage geographic layers via the [ccdph-shapefiles](https://github.com/Cook-County-Department-of-Public-Health/ccdph-shapefiles) GitHub repository.
[This Quarto document](https://github.com/Cook-County-Department-of-Public-Health/ccdph-shapefiles/blob/main/shapefile-creation-code/spatial_data_creation_latest.qmd) provides code for developing and writing spatial datasets to the inter-spatial SQL Server database. 

### Code for managing geographic correspondence tables
The Epidemiology Unit develops and shares code used to develop and manage geography correspondence tables via the [ccdph-documents](https://github.com/Cook-County-Department-of-Public-Health/ccdph-documents) GitHub repository.
[This Quarto document](https://github.com/Cook-County-Department-of-Public-Health/ccdph-documents/blob/main/documents/handbook_indepth/dm_geography/geography_correspondence_table_creation.qmd) provides code for developing and writing correspondence tables to the inter-spatial SQL Server database. An html version of this [geography correspondence document is available on this web page](https://cookcountypublichealth.org/documents/handbook/in_depth/geography_correspondence_table_creation.html).

For more information on how to access geographic data, refer to the [Storage and Access](storage.qmd) section of the handbook.
:::