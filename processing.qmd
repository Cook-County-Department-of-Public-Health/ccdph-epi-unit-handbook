# Processing {.unnumbered}

Data processing refers to the manipulation and transformation of raw data into a more meaningful and usable format. This section provides general information concerning the processing of data commonly used by the Epidemiology Unit along with associated links to resources that provide step-by-step instructions for producing analysis-ready datasets. These pages are frequently updated given that Epidemiology Unit staff are continually developing and enhancing data processing code.

## Vital statistics
The Epidemiology Unit maintains the GitHub repository, [ccdph-vital-statistics](https://github.com/Cook-County-Department-of-Public-Health/ccdph-vital-statistics) for managing code related the processing of vital statistics including mortality and natality datasets.

### Mortality and leading causes of death coding
Processing of mortality data using ICD-10 code.

### Natality
Processing of natality data using ICD-10 codes.

## Hospitalization 
The Illinois Department of Public Health (IDPH) makes available to CCDPH inpatient and outpatient (or emergency department visits) hospital discharge data. These data can exceed many million records per year and therefore requires substantial processing prior to data analysis. The first challenge concerns classification the discharges into meaningful categories. For this, we use the primary diagnosis information for each patient. The primary diagnosis is assigned using ICD-10 categorization schema. 

These principal diagnoses are then further aggregated into categories using four conventional systems of grouping: (1) the ICD-10-CM (Clinical Modification) system; (3) the Clinical Classifications Software Refined (CCSR) categories; (2) Diagnostic Related Groups (DRG); and (4) Major Diagnostic Categories (MDCs).

### International Classification of Disease (ICD-10) codes
However it will take time for the health care system to fully implement the new standard, which is why the Epidemiology Unit uses ICD-10-CM definitions.

### International Classification of Disease Clinical Modification (ICD-10-CM)

### Clinical Classifications Software Refined (CCSR) Categories
The [Clinical Classifications Software Refined](https://hcup-us.ahrq.gov/toolssoftware/ccsr/dxccsr.jsp) (CCSR) for ICD-10-CM Diagnoses is one in a family of databases and software tools developed as part of the [Healthcare Cost and Utilization Project](https://www.ahrq.gov/data/hcup/index.html) (HCUP), a Federal-State-Industry partnership sponsored by the [Agency for Healthcare Research and Quality](https://www.ahrq.gov/) (AHRQ). HCUP databases, tools, and software inform decision making at the national, State, and community levels. 

The Clinical Classifications Software Refined (CCSR) for ICD-10-CM diagnoses aggregates more than 70,000 ICD-10-CM diagnosis codes into over 530 clinically meaningful categories. The CCSR is based on the International Classification of Diseases, 10th Revision, Clinical Modification (ICD-10-CM). The categories are organized across 22 body systems, which generally follow the structure of the ICD-10-CM diagnosis chapters.

The CCSR for ICD-10-CM diagnoses provides a means by which to identify specific clinical conditions using ICD-10-CM diagnosis codes. The CCSR for ICD-10-CM capitalizes on the specificity of the ICD-10-CM coding scheme by creating new clinical categories that did not exist in previous versions of the CCS tool and allowing ICD-10-CM codes to be classified in more than one category. *The CCSR is intended to be used analytically to examine patterns of healthcare in terms of cost, utilization, and outcomes; rank utilization by diagnoses; and risk adjust by clinical condition*.

### Diagnostic Related Groups (DRGs)
https://www.cms.gov/Medicare/Coding/ICD10/ICD-10-MS-DRG-Conversion-Project

### Major Diagnostic Categories (MDCs)
A three-digit numeric code that groups beneficiary diagnosis codes into broad categories based on condition type and body region.

##Spatial data

### Adding spatial data to database
Most of the foundational boundary layers used by the Epidemiology Unit are stored in the SQL Server *inter-spatial* database.

```{r}
# activate libraries
#| eval: false
#| 
library(sf)
library(dplyr)
library(tidyverse)
library(spData)
library(tigris)
library(units)
library(keyring)

# connect to inter-spatial
con_ccdph_sql_server <- dbConnect(odbc::odbc(),
                        Driver   = "SQL Server",
                        Server   = key_get("ccdph_sql_server"),
                        Database = "inter-spatial")

# process ZCTAs
counties_il <- counties(state="IL", resolution="500k", cb=TRUE, year=2020)

counties_il_crs3435 <- counties_il %>%
  st_transform(3435) %>%
  st_as_sf() %>%
  select(geoid_state=STATEFP,
         geoid_county = COUNTYFP,
         geoid_state_county = GEOID,
         name_county = NAME,
         area_land = ALAND,
         area_water = AWATER) %>%
  mutate(area_land = set_units(area_land,ft^2),
         area_water = set_units(area_water,ft^2),
         area_land_sqmi = set_units(area_land, mi^2),
         area_water_sqmi = set_units(area_water,mi^2)) %>%
  select(-c(area_land,area_water))

counties_il_crs3435_db2 <- fx_spatial_data_output(counties_il_crs3435,"counties_il_crs3435_2")

counties_il_crs3435_df <- as.data.frame(counties_il_crs3435) # convert to data frame
counties_il_crs3435_geom <- counties_il_crs3435_df$geometry # isolate geometry column
counties_il_crs3435_df[,"geom"]<-st_as_text(st_transform(counties_il_crs3435_geom,crs = 3435))# convert geometry format

# write data frame to database
dbWriteTable(con_ccdph_sql_server, 
             Id(schema="dbo", table="counties_il_crs3435"), 
             counties_il_crs3435_df %>% select(-geometry))

# add new geometry column to database table
dbSendQuery(conn = con_ccdph_sql_server, 
            statement = "ALTER TABLE dbo.counties_il_crs3435 ADD geom2 geometry")

# transform and copy existing text-based geometry into new geometry column
dbSendQuery(conn = con_ccdph_sql_server,
            statement = "UPDATE dbo.counties_il_crs3435 Set geom2 = geometry::STGeomFromText(geom, 3435)")

# drop text-based geometry column
dbSendQuery(conn = con_ccdph_sql_server, 
            statement = "ALTER TABLE dbo.counties_il_crs3435 DROP COLUMN geom")

# read table
counties_il_crs3435_db<-st_read(con_ccdph_sql_server, 
                      query = "SELECT NAME, geom2.STAsBinary() AS geom FROM dbo.counties_il_crs3435")

zctas_cc <- st_read("C:/Users/christopher.smith/OneDrive - Cook County Health/git_repos/justenvirons/ccdph-shapefiles/epsg-3435-illinois-stateplane-east/cook_county_zctas_epsg3435.shp") %>%
  st_transform(crs=3435)

st_crs(zctas_cc)
plot(zctas_cc['zcta'])

data("us_states") # retrieve us states from spdata package
us_states <- as.data.frame(us_states) # convert to data frame
us_states_geom <- us_states$geometry # isolate geometry column
us_states[,"geom"]<-st_as_text(st_transform(us_states_geom,"+init=epsg:2992")) # convert geometry format

# write data frame to database as new table without geography column
dbWriteTable(con_spatial, 
             Id(schema="dbo", table="us_states"), 
             us_states %>% select(-geometry))

# drop us_states table from database
# dbSendQuery(conn = con_spatial, 
#             statement = "DROP TABLE dbo.us_states")

# add new geometry column to database table
dbSendQuery(conn = con_spatial, 
            statement = "ALTER TABLE dbo.us_states ADD geom2 geometry")

# transform and copy existing text-based geometry into new geometry column
dbSendQuery(conn = con_spatial,
            statement = "UPDATE dbo.us_states Set geom2 = geometry::STGeomFromText(geom, 2992)")

# drop text-based geometry column
dbSendQuery(conn = con_spatial, 
            statement = "ALTER TABLE dbo.us_states DROP COLUMN geom")

# read database geometry table into R
us_states_db<-st_read(con_spatial, 
                      query = "SELECT NAME, geom2.STAsBinary() AS geom FROM dbo.us_states")

```

