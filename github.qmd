# GitHub {.unnumbered}
[GitHub](https://github.com/) is a web-based platform that provides a collaborative environment for CCDPH employees and potentially others to work on and manage files using the [Git version control system](https://git-scm.com/). The CCDPH Epidemiology and Communicable Disease Units typically organize collaborative projects through GitHub repositories, which are essentially collections of files and their complete version histories. Each repository is associated with a project. For example, code used to create this Epidemiology Unit Employee Handbook is managed via the [ccdph-epi_unit_handbook](https://github.com/Cook-County-Department-of-Public-Health/ccdph-epi_unit_handbook)  GitHub repository. Repositories can be made either public or private, depending on how the information is to be shared.

## CCDPH organization GitHub account
CCDPH GitHub repositories are typically stored under the [CCDPH organization account](https://github.com/Cook-County-Department-of-Public-Health), of which [Kelley Bemis](kbemis@cookcountyhhs.org) and [Scott Smith](christopher.smith@cookcountyhealth.org) are owners. If you need access to the CCDPH GitHub account, email a request to either Kelley [kbemis@cookcountyhhs.org](kbemis@cookcountyhhs.org) or [christopher.smith@cookcountyhealth.org](christopher.smith@cookcountyhealth.org).

## Active GitHub repositories
The [complete list of CCDPH GitHub repositories](https://github.com/orgs/Cook-County-Department-of-Public-Health/repositories) represents a wide range of projects. Some projects concern dashboards (e.g., [ccdph-population-shiny](https://github.com/Cook-County-Department-of-Public-Health/ccdph-population-shiny)) while others pertain to datasets (e.g., [ccdph-hospital-discharge](https://github.com/Cook-County-Department-of-Public-Health/ccdph-hospital-discharge)) or specific documents or platforms (e.g., (nssp-opioid-report)[https://github.com/Cook-County-Department-of-Public-Health/nssp-opioid-report]). Brief summaries of repositories that are particularly relevant to the Epidemiology Unit follows. Refer to the repository-specific readme files for for up-to-date information concerning each repository.

### General use repositories
The Epidemiology and Communicable Disease Units have created a few general use repositories for storing commonly used functions, GIS shapefiles, and datasets. The content stored in these repositories are often used across projects to perform a wide range of activities. The Epidemiology Unit has also created a repository for managing code for producing written documents such as data briefs and special topics reports.

+ [ccdph-functions](https://github.com/Cook-County-Department-of-Public-Health/ccdph-functions): Includes a number of scripts with functions used to carry out a wide range of operations including [geocoding](https://github.com/Cook-County-Department-of-Public-Health/ccdph-functions/blob/master/geocoding-functions.R) and [spatial database functions](https://github.com/Cook-County-Department-of-Public-Health/ccdph-functions/blob/master/spatial-database-functions.R) for reading and writing geographic data from/to SQL Server's inter-spatial database.
+ [ccdph-shapefiles](https://github.com/Cook-County-Department-of-Public-Health/ccdph-shapefiles): This repository has compressed (zip) shapefiles of base geographies provided in two projections: (epsg 3435 appropriate for geoprocessing operations and epsg 4326 for leaflet maps). For the latest geographic data, refer to tables stored in the SQL Server *inter-spatial* database.
+ [ccdph-datasets](https://github.com/Cook-County-Department-of-Public-Health/ccdph-data-sets): Contains public population and "helper" data sets frequently used by the CCDPH and Epidemiology and Communicable Disease departments. Datasets are stored in this repository to facilitate the systematic development and sharing of standardized population tables among data users. Code in the [data-set-creation-code folder](https://github.com/Cook-County-Department-of-Public-Health/ccdph-data-sets/tree/main/data-set-creation-code) are used to create standardized tables, most of which are written and managed in SQL Server. Much of the data provided in the datasets repository are transformed population tables imported from the US Census Bureau decennial censuses and American Community Survey (ACS). For the latest population data, refer to tables stored in the SQL Server *inter-census* database.
+ [ccdph-documents](https://github.com/Cook-County-Department-of-Public-Health/ccdph-documents): Includes Quarto/markdown documents developed by the CCDPH's Epidemiology Unit. Documents managed via this repository include data briefs, special topics reports, and in-depth documents linked from the Epidemiology Unit Handbook. The repository also includes general purpose templates for different document formats.

### Dataset-specific repositories
+ [ccdph-vital-statistics](https://github.com/Cook-County-Department-of-Public-Health/ccdph-vital-statistics): Used by CCDPH's Epidemiology Unit to manage code related to the processing of vital statistics data. The unit receives vital statistics (i.e., births, deaths) data on a regular basis from the Illinois Department of Public Health (IDPH) [Vital Statistics Office](https://dph.illinois.gov/data-statistics/vital-statistics.html). These statistics provide essential insights into health trends including mortality (leading causes of death) and maternal child health among residents within CCDPH's jurisdiction.
+ [ccdph-hospital-discharge](https://github.com/Cook-County-Department-of-Public-Health/ccdph-hospital-discharge): Includes code for the processing administrative data collected when a patient is discharged from a hospital. The CCDPH receives both [inpatient and outpatient data](https://dph.illinois.gov/topics-services/prevention-wellness/patient-safety-quality/discharge-data.html) from the Illinois Department of Public Health (IDPH) on an irregular basis. The discharge data include patient demographic information, diagnosis codes, procedures codes, and related charges.
+ [ccdph-cchhs](https://github.com/Cook-County-Department-of-Public-Health/ccdph-cchhs): Contains code for processing annual Cook County Health Survey (CCHS) data. The [Cook County Health Survey (CCHS)](https://cookcountypublichealth.org/health-survey/) is a cross-sectional survey of randomly selected adults aged 18 and older residents of suburban Cook County.

### Platform or document-specific repositories
+ [ccdph-health-atlas](https://github.com/Cook-County-Department-of-Public-Health/ccdph-health-atlas): Used by CCDPH's Epidemiology Unit to manage code related to the processing of data for the [Cook County Health Atlas](https://cookcountyhealthatlas.org/).
+ [ccdph-population-shiny](https://github.com/Cook-County-Department-of-Public-Health/ccdph-population-shiny): Manages code used for processing data for and serving up, via R Shiny, the [CCDPH Population Dashboard](https://ccdphcd.shinyapps.io/ccdph-population-shiny/).
+ [ccdph-epi-unit-handbook](https://github.com/Cook-County-Department-of-Public-Health/ccdph-epi-unit-handbook): Used for managing code for producing content for the [CCDPH Epidemiology Unit Handbook](https://cookcountypublichealth.org/documents/handbook).

## GitHub file management and security
It is critical that protected health information (PHI) *never be stored* in GitHub repositories. The CCDPH Epidemiology and Communicable Disease Units have also worked with CCH Health Information Systems (HIS) to adopt the following policies for managing information on GitHub.

+ Passwords should be masked in code that is managed on GitHub. Use R's [keyring package](https://cran.r-project.org/web/packages/keyring/index.html) for storing and referencing environment variables and passwords in code
+ Local file paths (e.g., directories on personal computers and OneDrive) should be masked in code that is managed on GitHub
+ Server names (e.g., the SQL Server service name) and locations should be masked in code managed on GitHub
+ External repositories are only downloaded from vetted GitHub accounts representing credible institutions (e.g., CCDPH, CDC)
+ All newly created CCDPH repositories should be assigned to "Private" mode by default

## Using GitHub repositories in RStudio
Managing GitHub repositories in RStudio involves using RStudio’s built-in Git tools or running Git commands directly in the R console or terminal. Here’s a quick guide:

1. **Set Up Git in RStudio**:
    i) Install Git and configure it in RStudio by going to Tools > Global Options > Git/SVN.
    i) Set the Git executable path if it’s not auto-detected, and set up your GitHub user credentials if needed.

2. **Create a New Repository**:
    i) In RStudio, create a new project using File > New Project and select Version Control > Git.
    i) Clone a GitHub repository by providing the repository URL in the clone dialog box.
    i) RStudio will create a local Git repository linked to the GitHub repository.

3. **Staging and Committing Changes**:
    i) Use the Git tab in RStudio to see tracked files, where you can stage files by checking them in the “Staged” column.
    i) Write a commit message and press Commit to save changes to the local repository.

4. **Push and Pull Changes**:
    i) Use the Push button in the Git tab to upload your local commits to GitHub.
    i) Use Pull to sync changes from GitHub to your local repository, merging updates made by collaborators.

5. **Working with Branches**:
    i) Create new branches by clicking New Branch in the Git tab or running git branch <branch_name> in the terminal.
    i) Switch branches via the Git tab or with git checkout <branch_name> in the terminal.
    i) Merge branches using the Merge button or git merge <branch_name> in the terminal.

6. **Viewing History and Reverting Changes**:
    i) Check commit history with the History button in the Git tab, allowing you to view previous commits and diffs.
    i) Undo or revert changes by right-clicking a file in the Git tab or using Git commands like git reset and git revert.

**Example Workflow**

* Open or clone a repository in RStudio.
* Edit files, then stage and commit changes in the Git tab.
* Push the changes to GitHub when ready.
* Pull frequently to stay in sync with collaborators.

With these steps, you can manage your GitHub repositories directly in RStudio, making it easier to work within an integrated environment.

## Additional training
LinkedIn Learning has several courses about GitHub. For example, [Learning GitHub](https://www.linkedin.com/learning/learning-github-18719601/getting-started-with-github?u=2228698) introduces GitHub and Git, the version control system that GitHub is built upon. The instructor shows how GitHub can create collaborative workflows and how version control enables teams to track changes in files. The course gives some advice to work better with open-source projects.
